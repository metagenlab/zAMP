rule create_biom_from_count_table:
    conda:
        os.path.join(dir.envs, "amplicons_r_utils.yml")
    container:
        singularity_envs["r_utils"]
    input:
        count_table=os.path.join(dir.out.base, "{prefix}", "count_table.tsv"),
    output:
        biom_count=os.path.join(dir.out.base, "{prefix}", "otu_biom.biom"),
    log:
        os.path.join(dir.logs, "{prefix}", "otu_biom.txt"),
    script:
        "scripts/create_biom_from_count_table.R"


rule import_count_table_to_QIIME2:
    conda:
        os.path.join(dir.envs, "qiime2.yml")
    container:
        singularity_envs["qiime2"]
    input:
        os.path.join(dir.out.base, "{prefix}", "otu_biom.biom"),
    output:
        os.path.join(dir.out.base, "{prefix}", "count-table.qza"),
    log:
        os.path.join(dir.logs, "{prefix}", "count-table.txt"),
    shell:
        """
        qiime tools import \\
        --input-path {input} \\
        --type 'FeatureTable[Frequency]' \\
        --input-format BIOMV100Format \\
        --output-path {output}
        """


rule create_visualize_count_table_QIIME2:
    conda:
        os.path.join(dir.envs, "qiime2.yml")
    container:
        singularity_envs["qiime2"]
    input:
        os.path.join(dir.out.base, "{prefix}", "count-table.qza"),
    output:
        os.path.join(dir.out.base, "{prefix}", "count-table.qzv"),
    log:
        os.path.join(dir.logs, "{prefix}.txt"),
    shell:
        """
        qiime feature-table summarize \\
        --i-table {input[0]} \\
        --o-visualization {output[0]}
        """


rule force_all_upper_case_rep_seq:
    input:
        rep_seqs=os.path.join(
            dir.out.base, "{denoiser}", "{prefix}", "dna-sequences.fasta"
        ),
    output:
        rep_seqs=os.path.join(
            dir.out.base, "{denoiser}", "{prefix}", "dna-sequences_all_UPPER.fasta"
        ),
    log:
        os.path.join(dir.logs, "{denoiser}", "{prefix}", "dna-sequences_all_UPPER.txt"),
    shell:
        """
        awk '/^>/ {{print($0)}}; /^[^>]/ {{print(toupper($0))}}' {input[0]} > {output[0]}
        """


rule import_rep_seq_to_QIIME2:
    conda:
        os.path.join(dir.envs, "qiime2.yml")
    container:
        singularity_envs["qiime2"]
    input:
        rep_seqs=os.path.join(
            dir.out.base, "{denoiser}", "{prefix}", "dna-sequences_all_UPPER.fasta"
        ),
    output:
        os.path.join(dir.out.base, "{denoiser}", "{prefix}", "rep-seqs.qza"),
    log:
        os.path.join(dir.logs, "{denoiser}", "{prefix}", "rep-seqs.txt"),
    shell:
        """
        qiime tools import \\
        --input-path {input} \\
        --output-path {output} \\
        --type 'FeatureData[Sequence]'
        """


# Build a new tree based on the filtered sequences
rule create_tree_in_QIIME2:
    conda:
        os.path.join(dir.envs, "qiime2.yml")
    container:
        singularity_envs["qiime2"]
    input:
        os.path.join(dir.out.base, "{denoiser}", "{prefix}", "rep-seqs.qza"),
    output:
        aligned=os.path.join(
            dir.out.base, "{denoiser}", "{prefix}", "aligned-rep-seqs.qza"
        ),
        masked=os.path.join(
            dir.out.base, "{denoiser}", "{prefix}", "masked-aligned-rep-seqs.qza"
        ),
        unrooted=os.path.join(
            dir.out.base, "{denoiser}", "{prefix}", "unrooted-tree.qza"
        ),
        rooted=os.path.join(dir.out.base, "{denoiser}", "{prefix}", "rooted-tree.qza"),
    log:
        os.path.join(dir.logs, "{denoiser}", "{prefix}", "rooted-tree.txt"),
    threads: 4
    shell:
        """
        qiime phylogeny align-to-tree-mafft-fasttree \\
        --p-n-threads {threads} \\
        --i-sequences {input} \\
        --o-alignment {output.aligned} \\
        --o-masked-alignment {output.masked} \\
        --o-tree {output.unrooted} \\
        --o-rooted-tree {output.rooted}
        """


rule export_QIIME2_tree:
    conda:
        os.path.join(dir.envs, "qiime2.yml")
    container:
        singularity_envs["qiime2"]
    input:
        os.path.join(dir.out.base, "{denoiser}", "{prefix}", "rooted-tree.qza"),
    output:
        os.path.join(dir.out.base, "{denoiser}", "{prefix}", "tree.nwk"),
    log:
        os.path.join(dir.logs, "{denoiser}", "{prefix}", "tree.txt"),
    shell:
        """
        qiime tools export --input-path {input} --output-path $(dirname {output[0]})
        """


rule create_visualize_rep_seq_QIIME2:
    conda:
        os.path.join(dir.envs, "qiime2.yml")
    container:
        singularity_envs["qiime2"]
    input:
        os.path.join(dir.out.base, "{denoiser}", "2_denoised", "rep-seqs.qza"),
    output:
        os.path.join(dir.out.base, "{denoiser}", "2_denoised", "rep-seqs.qzv"),
    log:
        os.path.join(dir.logs, "{denoiser}", "2_denoised", "rep-seqs_qzv.txt"),
    shell:
        """
        qiime feature-table tabulate-seqs \\
        --i-data {input} \\
        --o-visualization {output}
        """


rule import_taxonomy_to_Qiime2:
    conda:
        os.path.join(dir.envs, "qiime2.yml")
    container:
        singularity_envs["qiime2"]
    input:
        os.path.join(
            dir.out.base,
            "{denoiser}",
            "3_classified",
            "{classifier}_{tax_DB}",
            "taxonomy.tsv",
        ),
    output:
        os.path.join(
            dir.out.base,
            "{denoiser}",
            "3_classified",
            "{classifier}_{tax_DB}",
            "taxonomy.qza",
        ),
    log:
        os.path.join(
            dir.logs,
            "{denoiser}",
            "3_classified",
            "{classifier}_{tax_DB}",
            "qiime2",
            "taxonomy_import.log",
        ),
    shell:
        """
        qiime tools import \\
        --type FeatureData[Taxonomy] \\
        --input-path {input[0]} \\
        --input-format HeaderlessTSVTaxonomyFormat \\
        --output-path {output[0]}
        """


rule create_visualize_table_QIIME2:
    conda:
        os.path.join(dir.envs, "qiime2.yml")
    container:
        singularity_envs["qiime2"]
    input:
        os.path.join(
            dir.out.base,
            "{denoiser}",
            "3_classified",
            "{classifier}_{tax_DB}",
            "taxonomy.qza",
        ),
    output:
        os.path.join(
            dir.out.base,
            "{denoiser}",
            "3_classified",
            "{classifier}_{tax_DB}",
            "taxonomy.qzv",
        ),
    log:
        os.path.join(
            dir.logs,
            "{denoiser}",
            "3_classified",
            "{classifier}_{tax_DB}",
            "qiime2",
            "taxonomy_visualization.log",
        ),
    shell:
        """
        qiime metadata tabulate \\
        --m-input-file {input} \\
        --o-visualization {output}
        """
