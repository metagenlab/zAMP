## Plotting data
### Build stat table for raw reads and processed reads
rule raw_to_processed_reads_stats:
    conda:
        os.path.join(dir.envs, "amplicons_r_utils.yml")
    container:
        singularity_envs["r_utils"]
    input:
        phyloseq_object=os.path.join(
            dir.out.base,
            "{denoiser}",
            "4_physeq",
            "{classifier}_{tax_DB}",
            "nofiltering",
            "norarefaction",
            "no_collapse",
            "base.rds",
        ),
        multi_QC_report_path=os.path.join(
            dir.out.qc, "multiqc_raw_reads_report_data", "multiqc_general_stats.txt"
        ),
    output:
        raw_to_filtered_reads_stats=report(
            os.path.join(
                dir.out.base,
                "{denoiser}",
                "5_visualization",
                "{classifier}_{tax_DB}",
                "reads",
                "raw_to_filtered_reads_stats.tsv",
            ),
        ),
    log:
        os.path.join(
            dir.logs,
            "{denoiser}",
            "5_visualization",
            "{classifier}_{tax_DB}",
            "reads",
            "raw_to_filtered_reads_stats.txt",
        ),
    script:
        "scripts/raw_to_processed_reads_stats.R"


### Plot stat table for raw reads and processed reads
rule raw_to_processed_reads_plot:
    conda:
        os.path.join(dir.envs, "amplicons_r_utils.yml")
    container:
        singularity_envs["r_utils"]
    input:
        raw_to_filtered_reads_stats=os.path.join(
            dir.out.base,
            "{denoiser}",
            "5_visualization",
            "{classifier}_{tax_DB}",
            "reads",
            "raw_to_filtered_reads_stats.tsv",
        ),
        Metadata_table=METADATA,
        multi_QC_report_path=os.path.join(
            dir.out.qc, "multiqc_raw_reads_report_data", "multiqc_general_stats.txt"
        ),
    output:
        reads_plot_with_filtered=report(
            os.path.join(
                dir.out.base,
                "{denoiser}",
                "5_visualization",
                "{classifier}_{tax_DB}",
                "reads",
                "reads_plot_with_filtered.png",
            ),
            caption=os.path.join("report", "fig1.rst"),
            category="Step 1",
        ),
    params:
        grouping_column="sample_group",
        sample="sample",
    log:
        os.path.join(
            dir.logs,
            "{denoiser}",
            "5_visualization",
            "{classifier}_{tax_DB}",
            "reads",
            "reads_plot_with_filtered.txt",
        ),
    script:
        "scripts/raw_to_processed_reads_plot.R"


### Build stat table for raw reads, processed reads and taxonomically filtered reads
rule raw_to_tax_filtered_reads_stats:
    conda:
        os.path.join(dir.envs, "amplicons_r_utils.yml")
    container:
        singularity_envs["r_utils"]
    input:
        read_filtering=os.path.join(
            dir.out.base,
            "{denoiser}",
            "4_physeq",
            "{classifier}_{tax_DB}",
            "nofiltering",
            "norarefaction",
            "no_collapse",
            "base.rds",
        ),
        taxonomic_filtering=os.path.join(
            dir.out.base,
            "{denoiser}",
            "4_physeq",
            "{classifier}_{tax_DB}",
            "{filter_lineage}_in_{filter_tax_rank}",
            "norarefaction",
            "no_collapse",
            "base.rds",
        ),
        multi_QC_report_path=os.path.join(
            dir.out.qc, "multiqc_raw_reads_report_data", "multiqc_general_stats.txt"
        ),
    output:
        raw_to_filtered_reads_stats=os.path.join(
            dir.out.base,
            "{denoiser}",
            "5_visualization",
            "{classifier}_{tax_DB}",
            "reads",
            "reads_stats_with_{filter_lineage}_in_{filter_tax_rank}_filtered.tsv",
        ),
    log:
        os.path.join(
            dir.logs,
            "{denoiser}",
            "5_visualization",
            "{classifier}_{tax_DB}",
            "reads",
            "reads_stats_with_{filter_lineage}_in_{filter_tax_rank}_filtered.txt",
        ),
    script:
        "scripts/raw_to_tax_filtered_reads_stats.R"


### Plot stat table for raw reads, processed reads and taxonomically filtered reads
rule raw_to_tax_filtered_reads_plots:
    conda:
        os.path.join(dir.envs, "amplicons_r_utils.yml")
    container:
        singularity_envs["r_utils"]
    input:
        raw_to_filtered_reads_stats=os.path.join(
            dir.out.base,
            "{denoiser}",
            "5_visualization",
            "{classifier}_{tax_DB}",
            "reads",
            "reads_stats_with_{filter_lineage}_in_{filter_tax_rank}_filtered.tsv",
        ),
        Metadata_table=METADATA,
        multi_QC_report_path=os.path.join(
            dir.out.qc, "multiqc_raw_reads_report_data", "multiqc_general_stats.txt"
        ),
    output:
        reads_plot_with_filtered=os.path.join(
            dir.out.base,
            "{denoiser}",
            "5_visualization",
            "{classifier}_{tax_DB}",
            "reads",
            "reads_plot_with_{filter_lineage}_in_{filter_tax_rank}_filtered.png",
        ),
    params:
        sample="sample",
    log:
        os.path.join(
            dir.logs,
            "{denoiser}",
            "5_visualization",
            "{classifier}_{tax_DB}",
            "reads",
            "reads_plot_with_{filter_lineage}_in_{filter_tax_rank}_filtered.txt",
        ),
    script:
        "scripts/raw_to_processed_reads_plot.R"


### Plot interactive KRONA plots
rule KRONA_plots:
    conda:
        os.path.join(dir.envs, "amplicons_r_utils.yml")
    container:
        singularity_envs["r_utils"]
    input:
        phyloseq_melted_table=os.path.join(
            dir.out.base,
            "{denoiser}",
            "4_physeq",
            "{classifier}_{tax_DB}",
            "nofiltering",
            "norarefaction",
            "no_collapse",
            "base_melted.tsv",
        ),
    output:
        output=os.path.join(
            dir.out.base,
            "{denoiser}",
            "5_visualization",
            "{classifier}_{tax_DB}",
            "KRONA",
            "{grouping_column}",
            "{grouping_col_value}.html",
        ),
    params:
        grouping_column=lambda wildcards: wildcards.grouping_column,
        grouping_col_value=lambda wildcards: wildcards.grouping_col_value,
        sample_label="sample",
    log:
        os.path.join(
            dir.logs,
            "{denoiser}",
            "5_visualization",
            "{classifier}_{tax_DB}",
            "KRONA",
            "{grouping_column}",
            "{grouping_col_value}.txt",
        ),
    script:
        "scripts/KRONA_plots.R"


### Generate rarafaction curves to observe the effect of coverage on alpha-diversity metrics
rule rarefaction_curve:
    conda:
        os.path.join(dir.envs, "amplicons_r_utils.yml")
    container:
        singularity_envs["r_utils"]
    input:
        phyloseq_object=os.path.join(
            dir.out.base,
            "{denoiser}",
            "4_physeq",
            "{classifier}_{tax_DB}",
            "{filtration_or_not}",
            "{raref_or_not}",
            "no_collapse",
            "base.rds",
        ),
        Metadata_table=METADATA,
    output:
        rarefaction_curve=os.path.join(
            dir.out.base,
            "{denoiser}",
            "5_visualization",
            "{classifier}_{tax_DB}",
            "rarefaction_curve",
            "{filtration_or_not}",
            "{raref_or_not}_rarefaction_curve_{grouping_column}.png",
        ),
    params:
        grouping_column=lambda wildcards: wildcards.grouping_column,
    log:
        os.path.join(
            dir.logs,
            "{denoiser}",
            "5_visualization",
            "{classifier}_{tax_DB}",
            "rarefaction_curve",
            "{filtration_or_not}",
            "{raref_or_not}_rarefaction_curve_{grouping_column}.txt",
        ),
    script:
        "scripts/rarefaction_curve.R"
