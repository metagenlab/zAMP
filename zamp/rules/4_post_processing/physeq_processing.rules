## Set a rule order for ambiguous rules
ruleorder: physeq_tax_filtering > physeq_rarefy
ruleorder: Phyloseq_collapse_taxa > physeq_filter_norm_transf


## Small function to extract numbers from rarefaction values
import re


def rafe_value_fct(wildcards):
    if wildcards == "norarefaction":
        raise NameError(
            '"rarefaction_value" must not contain "norareraction, it is anyway computed'
        )
    else:
        value = re.findall(r"\d+", wildcards)
        return value


### Import for the first time everything into a phyloseq object
rule physeq_initial_import:
    conda:
        os.path.join(dir.envs, "amplicons_r_utils.yml")
    container:
        singularity_envs["r_utils"]
    input:
        count_table=os.path.join(
            dir.out.base, "{denoiser}", "2_denoised", "count_table.tsv"
        ),
        Metadata_table=METADATA,
        taxonomy_table=os.path.join(
            dir.out.base,
            "{denoiser}",
            "3_classified",
            "{classifier}_{tax_DB}",
            "dna-sequences_tax_assignments.txt",
        ),
        rep_seqs=os.path.join(
            dir.out.base, "{denoiser}", "2_denoised", "dna-sequences.fasta"
        ),
        tax_tree=os.path.join(dir.out.base, "{denoiser}", "2_denoised", "tree.nwk"),
    output:
        phyloseq_object=report(
            os.path.join(
                dir.out.base,
                "{denoiser}",
                "4_physeq",
                "{classifier}_{tax_DB}",
                "nofiltering",
                "norarefaction",
                "no_collapse",
                "base.rds",
            ),
            caption=os.path.join("report", "physeq.rst"),
            category="Physeq objects",
            subcategory="Initial import",
        ),
    params:
        viz_replace_empty_tax=REPL_EMPTY,
    log:
        os.path.join(
            dir.logs,
            "{denoiser}",
            "4_physeq",
            "{classifier}_{tax_DB}",
            "nofiltering",
            "norarefaction",
            "no_collapse",
            "initial_import.txt",
        ),
    script:
        "scripts/physeq_initial_import.R"


### Export the phyloseq objects in individual components
rule physeq_export_object:
    conda:
        os.path.join(dir.envs, "amplicons_r_utils.yml")
    container:
        singularity_envs["r_utils"]
    input:
        phyloseq_object=os.path.join(dir.out.base, "{prefix1}.rds"),
    output:
        tree_path=report(
            os.path.join(dir.out.base, "{prefix1}_export", "tree.tree"),
            caption=os.path.join("report", "physeq.rst"),
            category="Physeq objects",
            subcategory="Export",
        ),
        meta_path=report(
            os.path.join(dir.out.base, "{prefix1}_export", "metadata_table.tsv"),
            caption=os.path.join("report", "physeq.rst"),
            category="Physeq objects",
            subcategory="Export",
        ),
        taxonomy_path=report(
            os.path.join(
                dir.out.base, "{prefix1}_export", "dna-sequences_tax_assignments.txt"
            ),
            caption=os.path.join("report", "physeq.rst"),
            category="Physeq objects",
            subcategory="Export",
        ),
        OTU_path=report(
            os.path.join(dir.out.base, "{prefix1}_export", "count_table.tsv"),
            caption=os.path.join("report", "physeq.rst"),
            category="Physeq objects",
            subcategory="Export",
        ),
        rep_seq_path=report(
            os.path.join(dir.out.base, "{prefix1}_export", "dna-sequences.fasta"),
            caption=os.path.join("report", "physeq.rst"),
            category="Physeq objects",
            subcategory="Export",
        ),
    log:
        os.path.join(dir.logs, "{prefix1}_export", "export.txt"),
    script:
        "scripts/physeq_export.R"


### Filter sequences based on taxonomic assignment
rule physeq_tax_filtering:
    conda:
        os.path.join(dir.envs, "amplicons_r_utils.yml")
    container:
        singularity_envs["r_utils"]
    input:
        phyloseq_object=os.path.join(
            dir.out.base,
            "{denoiser}",
            "4_physeq",
            "{classifier}_{tax_DB}",
            "nofiltering",
            "norarefaction",
            "no_collapse",
            "base.rds",
        ),
    output:
        phyloseq_filtered_object=os.path.join(
            dir.out.base,
            "{denoiser}",
            "4_physeq",
            "{classifier}_{tax_DB}",
            "{filter_lineage}_in_{filter_tax_rank}",
            "norarefaction",
            "no_collapse",
            "base.rds",
        ),
    params:
        filter_tax_rank=lambda wildcards: wildcards.filter_tax_rank,
        filter_lineage=lambda wildcards: wildcards.filter_lineage,
        filter_out_tax_rank=EXCL_RANK,
        filter_out_lineage=EXCL_TAXA,
    log:
        os.path.join(
            dir.logs,
            "{denoiser}",
            "4_physeq",
            "{classifier}_{tax_DB}",
            "{filter_lineage}_in_{filter_tax_rank}",
            "no_collapse",
            "base.txt",
        ),
    script:
        "scripts/physeq_filter_taxa.R"


### Rarefy counts
rule physeq_rarefy:
    conda:
        os.path.join(dir.envs, "amplicons_r_utils.yml")
    container:
        singularity_envs["r_utils"]
    input:
        phyloseq_object=os.path.join(
            dir.out.base,
            "{denoiser}",
            "4_physeq",
            "{classifier}_{tax_DB}",
            "{filter_or_not}",
            "norarefaction",
            "no_collapse",
            "base.rds",
        ),
    output:
        phyloseq_object=os.path.join(
            dir.out.base,
            "{denoiser}",
            "4_physeq",
            "{classifier}_{tax_DB}",
            "{filter_or_not}",
            "rarefaction_{rarefaction_value}",
            "no_collapse",
            "base.rds",
        ),
    params:
        rarefaction_value=lambda wildcards: rafe_value_fct(wildcards.rarefaction_value),
    log:
        os.path.join(
            dir.logs,
            "{denoiser}",
            "4_physeq",
            "{classifier}_{tax_DB}",
            "{filter_or_not}",
            "rarefaction_{rarefaction_value}",
            "no_collapse",
            "base.txt",
        ),
    script:
        "scripts/physeq_rarefy.R"


### Add an updated phylogenetic tree into phyloseq objects
rule physeq_new_tree:
    conda:
        os.path.join(dir.envs, "amplicons_r_utils.yml")
    container:
        singularity_envs["r_utils"]
    input:
        new_tree=os.path.join(
            dir.out.base,
            "{denoiser}",
            "4_physeq",
            "{classifier}_{tax_DB}",
            "{filter_or_not}",
            "{raref_or_not}",
            "no_collapse",
            "base_export",
            "tree.nwk",
        ),
        phyloseq_object=os.path.join(
            dir.out.base,
            "{denoiser}",
            "4_physeq",
            "{classifier}_{tax_DB}",
            "{filter_or_not}",
            "{raref_or_not}",
            "no_collapse",
            "base.rds",
        ),
    output:
        phyloseq_object=report(
            os.path.join(
                dir.out.base,
                "{denoiser}",
                "4_physeq",
                "{classifier}_{tax_DB}",
                "{filter_or_not}",
                "{raref_or_not}",
                "no_collapse",
                "base_with_tree.rds",
            ),
            caption=os.path.join("report", "physeq.rst"),
            category="Physeq objects",
            subcategory="Updated after filtration",
        ),
    log:
        os.path.join(
            dir.logs,
            "{denoiser}",
            "4_physeq",
            "{classifier}_{tax_DB}",
            "{filter_or_not}",
            "{raref_or_not}",
            "no_collapse",
            "base_with_tree.txt",
        ),
    script:
        "scripts/physeq_add_new_tree.R"


### Melt the phyloseq object in a long object with one row for each sample and OTU/ASV. In temp since can be very voluminous
rule melt_Phyloseq_object:
    conda:
        os.path.join(dir.envs, "amplicons_r_utils.yml")
    container:
        singularity_envs["r_utils"]
    input:
        os.path.join(
            dir.out.base,
            "{denoiser}",
            "4_physeq",
            "{classifier}_{tax_DB}",
            "{filtered_or_not}",
            "{raref_or_not}",
            "{collapsed_or_not}",
            "{prefix1}.rds",
        ),
    output:
        report(
            os.path.join(
                dir.out.base,
                "{denoiser}",
                "4_physeq",
                "{classifier}_{tax_DB}",
                "{filtered_or_not}",
                "{raref_or_not}",
                "{collapsed_or_not}",
                "{prefix1}_melted.tsv",
            ),
        ),
    log:
        os.path.join(
            dir.logs,
            "{denoiser}",
            "4_physeq",
            "{classifier}_{tax_DB}",
            "{filtered_or_not}",
            "{raref_or_not}",
            "{collapsed_or_not}",
            "{prefix1}_melted.txt",
        ),
    script:
        "scripts/physeq_melt_table.R"


### Collapse taxa at a given taxonomic level
rule Phyloseq_collapse_taxa:
    conda:
        os.path.join(dir.envs, "amplicons_r_utils.yml")
    container:
        singularity_envs["r_utils"]
    input:
        os.path.join(
            dir.out.base,
            "{denoiser}",
            "4_physeq",
            "{classifier}_{tax_DB}",
            "{filter_or_not}",
            "{raref_or_not}",
            "no_collapse",
            "{prefix}.rds",
        ),
    output:
        os.path.join(
            dir.out.base,
            "{denoiser}",
            "4_physeq",
            "{classifier}_{tax_DB}",
            "{filter_or_not}",
            "{raref_or_not}",
            "collap_{collapse_level}",
            "{prefix}.rds",
        ),
    params:
        collapse_level=lambda wildcards: wildcards.collapse_level,
    log:
        os.path.join(
            dir.logs,
            "{denoiser}",
            "5_visualization",
            "{classifier}_{tax_DB}",
            "{filter_or_not}",
            "{raref_or_not}",
            "collap_{collapse_level}",
            "{prefix}.txt",
        ),
    script:
        "scripts/physeq_collapse_taxa.R"


### Reformat count and metadata tables
rule transpose_and_meta_count_table:
    conda:
        os.path.join(dir.envs, "amplicons_r_utils.yml")
    container:
        singularity_envs["r_utils"]
    input:
        count_table=os.path.join(dir.out.base, "{prefix}", "count_table.tsv"),
        meta=os.path.join(dir.out.base, "{prefix}", "metadata_table.tsv"),
    output:
        transposed_table=os.path.join(
            dir.out.base, "{prefix}", "count_table_transposed.txt"
        ),
        merged_meta=os.path.join(
            dir.out.base, "{prefix}", "count_table_transposed_with_meta.txt"
        ),
    priority: 1
    log:
        os.path.join(dir.logs, "{prefix}", "count_table_transposed.txt"),
    script:
        "scripts/transpose_and_add_meta_count_table.R"


### Transform and normalize counts
rule physeq_filter_norm_transf:
    conda:
        os.path.join(dir.envs, "amplicons_r_utils.yml")
    container:
        singularity_envs["r_utils"]
    input:
        phyloseq_object=os.path.join(dir.out.base, "{prefix}.rds"),
    output:
        phyloseq_norm=os.path.join(
            dir.out.base,
            "{prefix}_norm{norm_value}_abund{abund_value}_prev{prev_value}.rds",
        ),
    params:
        normalization=lambda wildcards: wildcards.norm_value,
        min_abundance_value=lambda wildcards: wildcards.abund_value,
        min_prevalence_value=lambda wildcards: wildcards.prev_value,
    log:
        os.path.join(
            dir.logs,
            "{prefix}_norm{norm_value}_abund{abund_value}_prev{prev_value}.txt",
        ),
    script:
        "scripts/transf_norm.R"
