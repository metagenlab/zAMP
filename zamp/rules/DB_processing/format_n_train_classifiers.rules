## Rules to format the taxonomy into a format for DADA2 implementation of RDP.
scripts = os.path.join(workflow.basedir, "rules", "DB_processing", "scripts")


rule DADA2_prep_tax_db:
    conda:
        os.path.join(dir.envs, "amplicons_r_utils.yml")
    container:
        singularity_envs["r_utils"]
    input:
        ref_seqs=os.path.join("{prefix}", "QIIME", "DB_amp.fasta"),
        ref_tax=os.path.join("{prefix}", "QIIME", "DB_amp_taxonomy.txt"),
    output:
        King_to_Species=os.path.join(
            "{prefix}", "dada2rdp", "DADA2_DB_amp_taxonomy_King_to_Species.txt"
        ),
        King_to_Genus=os.path.join(
            "{prefix}", "dada2rdp", "DADA2_DB_amp_taxonomy_King_to_Genus.txt"
        ),
        Genus_species=os.path.join(
            "{prefix}", "dada2rdp", "DADA2_DB_amp_taxonomy_Genus_species.txt"
        ),
    log:
        os.path.join("{prefix}", "logs", "dada2rdp", "DB_amp_taxonomy_dada2_prep.log"),
    threads: 1
    script:
        os.path.join(scripts, "dada2_prep_tax.R")


rule Hash_DADA2:
    input:
        os.path.join(
            "{prefix}", "dada2rdp", "DADA2_DB_amp_taxonomy_King_to_Species.txt"
        ),
        os.path.join("{prefix}", "dada2rdp", "DADA2_DB_amp_taxonomy_King_to_Genus.txt"),
        os.path.join("{prefix}", "dada2rdp", "DADA2_DB_amp_taxonomy_Genus_species.txt"),
    output:
        os.path.join("{prefix}", "dada2rdp", "DADA2_DB.hash"),
    threads: 1
    shell:
        """
        md5sum {input} | sort -k 2 | md5sum | cut -f 1 -d " " > {output}
        """


## Rules to format taxonomy to fit the requirements of the original RDP.
### Inspired from https://john-quensen.com/tutorials/training-the-rdp-classifier/ and
### following RDP authors' recommendations from https://github.com/rdpstaff/classifier/tree/17bf0bd10581f05c268e963e8c4150084d172d7d
### See 'RDP_validations.rules' for more validation based on RDP authors' recommendations


rule Preformat_for_cannonical_rdp:
    conda:
        os.path.join(dir.envs, "amplicons_r_utils.yml")
    container:
        singularity_envs["r_utils"]
    input:
        ref_tax=os.path.join("{prefix}", "QIIME", "DB_amp_taxonomy.txt"),
        ref_seqs=os.path.join("{prefix}", "QIIME", "DB_amp.fasta"),
    output:
        formatted_table=os.path.join("{prefix}", "RDP", "formatted_tax_table.tsv"),
    log:
        os.path.join("{prefix}", "logs", "RDP", "formatted_tax_table.log"),
    threads: 1
    script:
        os.path.join(scripts, "rdp_prep_tax.R")


rule Format_rdp_lineages:
    conda:
        os.path.join(dir.envs, "python.yml")
    container:
        singularity_envs["python"]
    input:
        table=os.path.join("{prefix}", "RDP", "formatted_tax_table.tsv"),
    output:
        read4train_tax=os.path.join("{prefix}", "RDP", "ready4train_lineages.txt"),
    threads: 1
    params:
        script=os.path.join(scripts, "lineage2taxTrain.py"),
    shell:
        """
        python {params.script} {input.table} > {output[0]}
        """


rule Format_rdp_add_lineages:
    conda:
        os.path.join(dir.envs, "python.yml")
    container:
        singularity_envs["python"]
    input:
        taxonomy=os.path.join("{prefix}", "RDP", "formatted_tax_table.tsv"),
        fasta=os.path.join("{prefix}", "QIIME", "DB_amp.fasta"),
    output:
        read4train_fasta=os.path.join("{prefix}", "RDP", "ready4train_seqs.fasta"),
    threads: 1
    params:
        script=os.path.join(
            scripts,
            "addFullLineage.py",
        ),
    shell:
        """
        python {params.script} {input.taxonomy} {input.fasta} > {output}       
        """


rule RDP_train:
    conda:
        os.path.join(dir.envs, "rdp_classifier.yml")
    container:
        singularity_envs["rdp_classifier"]
    input:
        fa=os.path.join("{prefix}", "RDP", "ready4train_seqs.fasta"),
        tax=os.path.join("{prefix}", "RDP", "ready4train_lineages.txt"),
    output:
        xml=os.path.join("{prefix}", "RDP", "bergeyTrainingTree.xml"),
        lst=os.path.join("{prefix}", "RDP", "genus_wordConditionalProbList.txt"),
        idx=os.path.join("{prefix}", "RDP", "wordConditionalProbIndexArr.txt"),
        wrd=os.path.join("{prefix}", "RDP", "logWordPrior.txt"),
    params:
        mem=RDP_MEM,
        out=os.path.join("{prefix}", "RDP"),
    threads: 1
    resources:
        mem_mb=get_mem_mb(RDP_MEM),
    shell:
        """
        rdp_classifier \\
        -Xmx{params.mem} -XX:ConcGCThreads={threads} \\
        train \\
        -o {params.out} \\
        -s {input.fa} \\
        -t {input.tax} 
        """


rule get_RDP_properties:
    input:
        xml=os.path.join("{prefix}", "RDP", "bergeyTrainingTree.xml"),
        lst=os.path.join("{prefix}", "RDP", "genus_wordConditionalProbList.txt"),
        idx=os.path.join("{prefix}", "RDP", "wordConditionalProbIndexArr.txt"),
        wrd=os.path.join("{prefix}", "RDP", "logWordPrior.txt"),
    output:
        os.path.join("{prefix}", "RDP", "rRNAClassifier.properties"),
    params:
        xml=lambda wildcards, input: os.path.basename(input.xml),
        lst=lambda wildcards, input: os.path.basename(input.lst),
        idx=lambda wildcards, input: os.path.basename(input.idx),
        wrd=lambda wildcards, input: os.path.basename(input.wrd),
        ver="RDP Naive Bayesian rRNA Classifier Version 2.14, August 2023",
    shell:
        """
        echo "bergeyTree={params.xml}
        probabilityList={params.lst}
        probabilityIndex={params.idx}
        wordPrior={params.wrd}
        classifierVersion={params.ver}" > {output}
        """


rule Hash_RDP:
    input:
        os.path.join("{prefix}", "RDP", "ready4train_seqs.fasta"),
        os.path.join("{prefix}", "RDP", "ready4train_lineages.txt"),
        os.path.join("{prefix}", "RDP", "bergeyTrainingTree.xml"),
        os.path.join("{prefix}", "RDP", "rRNAClassifier.properties"),
    output:
        os.path.join("{prefix}", "RDP", "RDP_DB.hash"),
    threads: 1
    shell:
        """
        md5sum {input} | sort -k 2 | md5sum | cut -f 1 -d " " > {output}
        """


rule Decipher_prep_fasta:
    conda:
        os.path.join(dir.envs, "amplicons_r_utils.yml")
    container:
        singularity_envs["r_utils"]
    input:
        ref_tax=os.path.join("{prefix}", "QIIME", "DB_amp_taxonomy.txt"),
        ref_seqs=os.path.join("{prefix}", "QIIME", "DB_amp.fasta"),
    output:
        decipher_seqs=os.path.join(
            "{prefix}", "decipher", "Decipher_DB_amp_taxonomy.fasta"
        ),
    log:
        os.path.join(
            "{prefix}", "logs", "decipher", "DB_amp_taxonomy_decipher_fasta.log"
        ),
    threads: 1
    script:
        os.path.join(scripts, "decipher_prep_tax.R")


rule Decipher_train_tax:
    conda:
        os.path.join(dir.envs, "decipher.yml")
    container:
        singularity_envs["decipher"]
    input:
        decipher_seqs=os.path.join(
            "{prefix}", "decipher", "Decipher_DB_amp_taxonomy.fasta"
        ),
    output:
        trained_tax=os.path.join(
            "{prefix}", "decipher", "Decipher_DB_amp_taxonomy_trained_tax.rds"
        ),
        training_plot=os.path.join(
            "{prefix}", "decipher", "Decipher_DB_amp_taxonomy_trained_plot.pdf"
        ),
    log:
        os.path.join(
            "{prefix}", "logs", "decipher", "DB_amp_taxonomy_decipher_tax_tree.log"
        ),
    threads: 1
    script:
        os.path.join(scripts, "decipher_train_tax.R")


rule Hash_Decipher:
    input:
        os.path.join("{prefix}", "decipher", "Decipher_DB_amp_taxonomy_trained_tax.rds"),
    output:
        os.path.join("{prefix}", "decipher", "decipher_DB.hash"),
    threads: 1
    shell:
        """
        md5sum {input} | sort -k 2 | md5sum | cut -f 1 -d " " > {output}
        """
