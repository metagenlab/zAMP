if not LOCAL:

    rule prefetch_sra:
        conda:
            os.path.join(dir.envs, "sra_tools.yml")
        container:
            singularity_envs["sra_tools"]
        output:
            temp(os.path.join(dir.out.base, "sra", "{sample}.sra")),
        log:
            os.path.join(
                dir.logs,
                "prefetch",
                "{sample}.txt",
            ),
        resources:
            max_copy=1,
        shell:
            """
            prefetch -v {wildcards.sample} -o {output} &> {log}
            """

    checkpoint fasterq_dump:
        conda:
            os.path.join(dir.envs, "sra_tools.yml")
        container:
            singularity_envs["sra_tools"]
        input:
            os.path.join(dir.out.base, "sra", "{sample}.sra"),
        output:
            temp(directory(os.path.join(dir.out.base, "sra", "{sample}"))),
        log:
            os.path.join(dir.logs, "fasterq-dump", "{sample}.txt"),
        params:
            os.path.join(dir.out.base, "sra", "{sample}", "{sample}*.fastq"),
        threads: 3
        shell:
            """
            fasterq-dump --threads {threads} \
            {input} -O {output} &> {log}
            pigz -p {threads} {params}
            """


rule copy_and_rename_paired_reads:
    input:
        get_reads,
    output:
        temp(os.path.join(dir.out.fastq, "{sample}_R1.fastq.gz")),
        temp(os.path.join(dir.out.fastq, "{sample}_R2.fastq.gz")),
    resources:
        max_copy=1,
    shell:
        """
        cp {input[0]} {output[0]} 
        cp {input[1]} {output[1]}
        """


rule copy_and_rename_single_reads:
    input:
        get_reads,
    output:
        temp(os.path.join(dir.out.fastq, "{sample}_single.fastq.gz")),
    resources:
        max_copy=1,
    shell:
        """
        cp {input} {output} 
        """
