rule qiime2_import_sequences:
    conda:
        os.path.join(dir.envs, "qiime2.yml")
    container:
        singularity_envs["qiime2"]
    input:
        os.path.join(dir.out.base, "{denoiser}", "2_denoised", "dna-sequences.fasta"),
    output:
        os.path.join(dir.out.base, "{denoiser}", "2_denoised", "dna-sequences.qza"),
    log:
        os.path.join(dir.logs, "{denoiser}", "qiime2", "fasta_import.log"),
    shell:
        """
        qiime tools import \\
        --input-path {input} \\
        --output-path {output} \\
        --type 'FeatureData[Sequence]' &> {log}
        """


rule qiime2_classify:
    conda:
        os.path.join(dir.envs, "qiime2.yml")
    container:
        singularity_envs["qiime2"]
    input:
        cla=os.path.join(DBPATH, "{tax_DB}", "qiime2", "rdp_classifier.qza"),
        seq=os.path.join(dir.out.base, "{denoiser}", "2_denoised", "dna-sequences.qza"),
    output:
        os.path.join(
            dir.out.base,
            "{denoiser}",
            "3_classified",
            "qiime2_{tax_DB}",
            "taxonomy.qza",
        ),
    log:
        os.path.join(dir.logs, "{denoiser}", "qiime2", "{tax_DB}_classify.log"),
    shell:
        """
        qiime feature-classifier classify-sklearn \\
        --i-classifier {input.cla} \\
        --i-reads {input.seq} \\
        --o-classification {output}
        """


rule qiime2_export_taxonomy:
    conda:
        os.path.join(dir.envs, "qiime2.yml")
    container:
        singularity_envs["qiime2"]
    input:
        os.path.join(
            dir.out.base,
            "{denoiser}",
            "3_classified",
            "qiime2_{tax_DB}",
            "taxonomy.qza",
        ),
    output:
        os.path.join(
            dir.out.base,
            "{denoiser}",
            "3_classified",
            "qiime2_{tax_DB}",
            "taxonomy.tsv",
        ),
    params:
        os.path.join(
            dir.out.base,
            "{denoiser}",
            "3_classified",
            "qiime2_{tax_DB}",
        ),
    log:
        os.path.join(dir.logs, "{denoiser}", "qiime2", "{tax_DB}_tax_export.log"),
    shell:
        """
        qiime tools export \\
        --input-path {input} \\
        --output-path {params} \\
        &> {log}
        """


rule seqkit_fasta2tab:
    conda:
        os.path.join(dir.envs, "seqkit.yml")
    container:
        singularity_envs["seqkit"]
    input:
        os.path.join(dir.out.base, "{denoiser}", "2_denoised", "dna-sequences.fasta"),
    output:
        temp(
            os.path.join(
                dir.out.base,
                "{denoiser}",
                "2_denoised",
                "sequences.tsv",
            )
        ),
    shell:
        """
        seqkit fx2tab {input} > {output}
        """


rule dada2_assign_taxonomy:
    conda:
        os.path.join(dir.envs, "DADA2_in_R.yml")
    container:
        singularity_envs["dada2"]
    input:
        seqs=os.path.join(dir.out.base, "{denoiser}", "2_denoised", "sequences.tsv"),
        trainset=os.path.join(DBPATH, "{tax_DB}", "dada2", "toSpecies_trainset.fa.gz"),
    output:
        os.path.join(
            dir.out.base,
            "{denoiser}",
            "3_classified",
            "dada2_{tax_DB}",
            "taxonomy.tsv",
        ),
    log:
        os.path.join(
            dir.logs,
            "{denoiser}",
            "3_classified",
            "dada2_{tax_DB}",
            "tax_assignments.log",
        ),
    script:
        os.path.join("scripts", "dada2_tax_assign.R")


rule rdp_classify:
    conda:
        os.path.join(dir.envs, "rdp_classifier.yml")
    container:
        singularity_envs["rdp_classifier"]
    input:
        trained_ref=os.path.join(DBPATH, "{tax_DB}", "rdp", "rRNAClassifier.properties"),
        query_seqs=os.path.join(
            dir.out.base, "{denoiser}", "2_denoised", "dna-sequences.fasta"
        ),
    output:
        os.path.join(
            dir.out.base,
            "{denoiser}",
            "3_classified",
            "rdp_{tax_DB}",
            "rdp_tax_assignments.txt",
        ),
    log:
        os.path.join(
            dir.logs,
            "{denoiser}",
            "3_classified",
            "rdp_{tax_DB}",
            "rdp_tax_assignments.log",
        ),
    threads: 1
    shell:
        """
        rdp_classifier -Xmx30g -XX:ConcGCThreads={threads} classify \\
        -t {input[0]} \\
        -o {output[0]} {input[1]} \\
        2> {log[0]}
        """


rule rdp_format_output:
    conda:
        os.path.join(dir.envs, "pandas.yml")
    container:
        singularity_envs["pandas"]
    input:
        RDP_output=os.path.join(
            dir.out.base,
            "{denoiser}",
            "3_classified",
            "rdp_{tax_DB}",
            "rdp_tax_assignments.txt",
        ),
    output:
        formatted_output=report(
            os.path.join(
                dir.out.base,
                "{denoiser}",
                "3_classified",
                "rdp_{tax_DB}",
                "taxonomy.tsv",
            ),
            caption=os.path.join("report", "tax_assignment.rst"),
            category="Taxonomic classification",
            subcategory="Orig_rdp_{tax_DB}",
        ),
    params:
        script=os.path.join(
            workflow.basedir,
            "rules",
            "3_tax_assignment",
            "scripts",
            "format_RDP_output.py",
        ),
    shell:
        """
        python {params.script} {input} {output}
        """


rule decipher_tax_assign:
    conda:
        os.path.join(dir.envs, "decipher.yml")
    container:
        singularity_envs["decipher"]
    input:
        trained_tax=os.path.join(
            DBPATH, "{tax_DB}", "decipher", "Decipher_DB_amp_taxonomy_trained_tax.rds"
        ),
        seq=os.path.join(
            dir.out.base, "{denoiser}", "2_denoised", "dna-sequences.fasta"
        ),
    output:
        tax=report(
            os.path.join(
                dir.out.base,
                "{denoiser}",
                "3_classified",
                "decipher_{tax_DB}",
                "dna-sequences_tax_assignments.txt",
            ),
            caption=os.path.join("report", "tax_assignment.rst"),
            category="Taxonomic classification",
            subcategory="DECIPHER_rdp_{tax_DB}",
        ),
        tax_plot=report(
            os.path.join(
                dir.out.base,
                "{denoiser}",
                "3_classified",
                "decipher_{tax_DB}",
                "dna-sequences_tax_assignments.pdf",
            ),
            caption=os.path.join("report", "tax_assignment.rst"),
            category="Taxonomic classification",
            subcategory="DECIPHER_rdp_{tax_DB}",
        ),
    log:
        os.path.join(
            dir.logs,
            "{denoiser}",
            "3_classified",
            "decipher_{tax_DB}",
            "dna-sequences_tax_assignments.txt",
        ),
    threads: 4
    resources:
        mem_mb=30000,
    script:
        "scripts/decipher_assign_tax.R"
