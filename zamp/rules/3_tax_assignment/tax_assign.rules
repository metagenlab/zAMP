rule QIIME1_assign_taxonomy_rdp:
    conda:
        os.path.join(dir.envs, "QIIME1.yml")
    container:
        singularity_envs["qiimerdp"]
    input:
        os.path.join(dir.out.base, "{denoiser}", "2_denoised", "dna-sequences.fasta"),
        os.path.join(DBPATH, "{tax_DB}/QIIME/DB_amp.fasta"),
        os.path.join(DBPATH, "{tax_DB}/QIIME/DB_amp_taxonomy.txt"),
    output:
        report(
            os.path.join(
                dir.out.base,
                "{denoiser}",
                "3_classified",
                "qiimerdp_{tax_DB}",
                "dna-sequences_tax_assignments.txt",
            ),
            caption=os.path.join("report", "tax_assignment.rst"),
            category="Taxonomic classification",
            subcategory="Qiime_rdp_{tax_DB}",
        ),
        os.path.join(
            dir.out.base,
            "{denoiser}",
            "3_classified",
            "qiimerdp_{tax_DB}",
            "dna-sequences_tax_assignments.log",
        ),
    log:
        os.path.join(
            dir.logs,
            "{denoiser}",
            "3_classified",
            "qiime_rdp_{tax_DB}",
            "dna-sequences_tax_assignments.txt",
        ),
    threads: 1
    resources:
        mem_mb=30000,
    shell:
        """
        export RDP_JAR_PATH=$(command -v rdp_classifier-2.2.jar);
        assign_path=$(which assign_taxonomy.py)
        python $assign_path \\
        -i {input[0]} \\
        -r {input[1]} \\
        -t {input[2]} \\
        -m rdp \\
        -o $(dirname {output[0]}) \\
        -c 0.5 \\
        --rdp_max_memory {resources[mem_mb]} \\
        2> {log[0]}
        """


rule dada2_assign_taxonomy_rdp:
    conda:
        os.path.join(dir.envs, "DADA2_in_R.yml")
    container:
        singularity_envs["dada2"]
    input:
        seqs=os.path.join(
            dir.out.base, "{denoiser}", "2_denoised", "dna-sequences.fasta"
        ),
        King_to_Species=os.path.join(
            DBPATH, "{tax_DB}", "dada2rdp", "DADA2_DB_amp_taxonomy_King_to_Species.txt"
        ),
        King_to_Genus=os.path.join(
            DBPATH, "{tax_DB}", "dada2rdp", "DADA2_DB_amp_taxonomy_King_to_Genus.txt"
        ),
        Genus_species=os.path.join(
            DBPATH, "{tax_DB}", "dada2rdp", "DADA2_DB_amp_taxonomy_Genus_species.txt"
        ),
    output:
        tax=report(
            os.path.join(
                dir.out.base,
                "{denoiser}",
                "3_classified",
                "dada2rdp_{tax_DB}",
                "dna-sequences_tax_assignments.txt",
            ),
            caption=os.path.join("report", "tax_assignment.rst"),
            category="Taxonomic classification",
            subcategory="DADA2_rdp_{tax_DB}",
        ),
    log:
        os.path.join(
            dir.logs,
            "{denoiser}",
            "3_classified",
            "dada2rdp_{tax_DB}",
            "dna-sequences_tax_assignments.txt",
        ),
    threads: 4
    resources:
        mem_mb=30000,
    script:
        "scripts/dada2_rdp_tax_assign.R"


rule rdp_classify:
    conda:
        os.path.join(dir.envs, "rdp_classifier.yml")
    container:
        singularity_envs["rdp_classifier"]
    input:
        trained_ref=os.path.join(DBPATH, "{tax_DB}", "RDP", "rRNAClassifier.properties"),
        query_seqs=os.path.join(
            dir.out.base, "{denoiser}", "2_denoised", "dna-sequences.fasta"
        ),
    output:
        os.path.join(
            dir.out.base,
            "{denoiser}",
            "3_classified",
            "RDP_{tax_DB}",
            "RDP_tax_assignments.txt",
        ),
    log:
        os.path.join(
            dir.logs,
            "{denoiser}",
            "3_classified",
            "RDP_{tax_DB}",
            "RDP_tax_assignments.log",
        ),
    threads: 1
    resources:
        mem_mb=30000,
    shell:
        """
        rdp_classifier -Xmx30g -XX:ConcGCThreads=1 classify \\
        -t {input[0]} \\
        -o {output[0]} {input[1]} \\
        2> {log[0]}
        """


rule rdp_format_output:
    conda:
        os.path.join(dir.envs, "pandas.yml")
    container:
        singularity_envs["pandas"]
    input:
        RDP_output=os.path.join(
            dir.out.base,
            "{denoiser}",
            "3_classified",
            "RDP_{tax_DB}",
            "RDP_tax_assignments.txt",
        ),
    output:
        formatted_output=report(
            os.path.join(
                dir.out.base,
                "{denoiser}",
                "3_classified",
                "RDP_{tax_DB}",
                "dna-sequences_tax_assignments.txt",
            ),
            caption=os.path.join("report", "tax_assignment.rst"),
            category="Taxonomic classification",
            subcategory="Orig_rdp_{tax_DB}",
        ),
    params:
        script=os.path.join(
            workflow.basedir,
            "rules",
            "3_tax_assignment",
            "scripts",
            "format_RDP_output.py",
        ),
    shell:
        """
        python {params.script} {input} {output}
        """


rule decipher_tax_assign:
    conda:
        os.path.join(dir.envs, "decipher.yml")
    container:
        singularity_envs["decipher"]
    input:
        trained_tax=os.path.join(
            DBPATH, "{tax_DB}", "decipher", "Decipher_DB_amp_taxonomy_trained_tax.rds"
        ),
        seq=os.path.join(
            dir.out.base, "{denoiser}", "2_denoised", "dna-sequences.fasta"
        ),
    output:
        tax=report(
            os.path.join(
                dir.out.base,
                "{denoiser}",
                "3_classified",
                "decipher_{tax_DB}",
                "dna-sequences_tax_assignments.txt",
            ),
            caption=os.path.join("report", "tax_assignment.rst"),
            category="Taxonomic classification",
            subcategory="DECIPHER_rdp_{tax_DB}",
        ),
        tax_plot=report(
            os.path.join(
                dir.out.base,
                "{denoiser}",
                "3_classified",
                "decipher_{tax_DB}",
                "dna-sequences_tax_assignments.pdf",
            ),
            caption=os.path.join("report", "tax_assignment.rst"),
            category="Taxonomic classification",
            subcategory="DECIPHER_rdp_{tax_DB}",
        ),
    log:
        os.path.join(
            dir.logs,
            "{denoiser}",
            "3_classified",
            "decipher_{tax_DB}",
            "dna-sequences_tax_assignments.txt",
        ),
    threads: 4
    resources:
        mem_mb=30000,
    script:
        "scripts/decipher_assign_tax.R"
