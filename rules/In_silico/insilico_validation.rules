import pandas as pd
import re

rule Extract_amplicon:
    input:
        genome="assembly_gz/genomes/{sample}_genomic.fna.gz",
        script=workflow.basedir + "/rules/In_silico/scripts/in_silico_PCR.pl",
    output:
        "InSilico/PCR/{sample}/insilico_amplicons.fasta",
    log:
        "InSilico/PCR/{sample}/insilico_amplicons.log",
    params:
        forward_pr=config["forward_primer"],
        reverse_pr=config["reverse_primer"],
        max_length=config["merged_max_length"],
    threads: 1
    shell:
        """
        perl {input.script} -s {input.genome} -a {params.forward_pr} -b {params.reverse_pr} -m -r -l {params.max_length} > {log} 2> {output}
        """

rule cutadapt_trim_in_silico:
    conda:
        "../../envs/cutadapt.yml"
    container:
        singularity_envs["cutadapt"]
    input:
        R1_raw_reads="InSilico/PCR/{sample}/insilico_amplicons.fasta",
    output:
        R1_trimmed_reads="InSilico/1a_trimmed_primers/{sample}_trimmed.fasta",
    log:
        "InSilico/1a_trimmed_primers/{sample}_trimmed.log",
    params:
        forward_primer=config["forward_primer"],
        reverse_primer=config["reverse_primer"],
        excepted_errors=config["excepted_errors"],
        min_length=config["merged_min_length"],
        max_length=config["merged_max_length"],
        coverage=config["amplicon_min_coverage"],
    threads: 1
    script:
        "scripts/cutadapt_amplicons.py"


def list_amplicons(wildcards):
    checkpoint_output = checkpoints.download_assemblies.get(**wildcards).output[0]
    directory = "/".join((checkpoint_output.split("/")[0:2]))
    assemblynames = glob_wildcards(os.path.join(directory, "{i}_genomic.fna.gz")).i
    expd = expand(
        "InSilico/1a_trimmed_primers/{sample}_trimmed.fasta", sample=assemblynames
    )
    return expd


# primer enlever


### Combine all extracted sequences in one big fasta
rule Insilico_merge_all_in_one_fasta:
    input:
        list_amplicons,
    output:
        "InSilico/1c_derep/merged_all.fasta",
    shell:
        """
        cat {input} >> {output}
        """


### Again, dereplicate all identical sequences after merging.
rule InSilico_derepicate_all:
    conda:
        "../../envs/vsearch.yml"
    container:
        singularity_envs["vsearch"]
    input:
        "InSilico/1c_derep/merged_all.fasta",
    output:
        "InSilico/2_denoised/dna-sequences.fasta",
    log:
        logging_folder + "InSilico/1c_all_merged_sequences/dereplicate_all.txt",
    shell:
        """
        vsearch --derep_fulllength {input} \
                --minuniquesize 1 \
                --relabel Seq_ \
                --output {output} \
                2> {log}
        """


### Count the number of occurences of the representative sequences in the samples.


rule InSilico_count_occurences:
    conda:
        "../../envs/vsearch.yml"
    container:
        singularity_envs["vsearch"]
    input:
        samples="InSilico/1a_trimmed_primers/{sample}_trimmed.fasta",
        rep_seq="InSilico/2_denoised/dna-sequences.fasta",
    output:
        "InSilico/2_denoised/countSeqs/{sample}_count_table.tsv",
    log:
        logging_folder + "InSilico/2_denoised/countSeqs/{sample}_count_table.tsv",
    shell:
        """
        if [ -s "{input[samples]}" ]
        then
            echo "{input[samples]} has some data." && \
            vsearch --usearch_global {input[samples]} \
                -otutabout {output} \
                -id 1 \
                -strand plus \
                --db {input[rep_seq]}
                # do something as file has data
        else
            echo "{input[samples]} is empty." && \
            touch {output}
            # do something as file is empty
        fi 2> {log}
        """


def list_samples_counts(wildcards):
    checkpoint_output = checkpoints.download_assemblies.get(**wildcards).output[0]
    directory = "/".join((checkpoint_output.split("/")[0:2]))
    assemblynames = glob_wildcards(os.path.join(directory, "{i}_genomic.fna.gz")).i
    expd = expand(
        "InSilico/2_denoised/countSeqs/{sample}_count_table.tsv", sample=assemblynames
    )
    return expd


### Format count table from InSilico
rule create_InSilico_count_table:
    conda:
        "../../envs/amplicons_r_utils.yml"
    container:
        singularity_envs["r_utils"]
    input:
        count_table_samples=list_samples_counts,
    output:
        count_table="InSilico/2_denoised/count_table.tsv",
    log:
        logging_folder + "InSilico/2_denoised/count_table.tsv",
    script:
        "scripts/create_count_table_from_insilico.R"


### Create a table to compare tax assignment
rule In_silico_tax_compare:
    conda:
        "../../envs/amplicons_r_utils.yml"
    container:
        singularity_envs["r_utils"]
    input:
        count_table="InSilico/2_denoised/count_table.tsv",
        Metadata_table=community_name + "-assemblies-summary.tsv",
        taxonomy_table="InSilico/3_classified/{classifier}_{tax_DB}/dna-sequences_tax_assignments.txt",
    output:
        output_table="InSilico/3_classified/{classifier}_{tax_DB}/InSilico_compare_tax.tsv",
        output_table_long="InSilico/3_classified/{classifier}_{tax_DB}/InSilico_compare_tax_long.tsv",
    params:
        viz_replace_empty_tax=config["viz_replace_empty_tax"],
        db_path=config["tax_DB_path"],
        db_name=config["tax_DB_name"],
    log:
        logging_folder
        + "InSilico/3_classified/{classifier}_{tax_DB}/InSilico_compare_tax.log",
    script:
        "scripts/In_silico_tax_comparison.R"
