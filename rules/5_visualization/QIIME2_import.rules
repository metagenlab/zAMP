rule create_biom_from_count_table:
    conda:
        "../../envs/amplicons_r_utils.yml"
    container:
        singularity_envs["r_utils"]
    input:
        count_table="{prefix}/count_table.tsv",
    output:
        biom_count="{prefix}/otu_biom.biom",
    log:
        logging_folder + "{prefix}/otu_biom.txt",
    script:
        "scripts/create_biom_from_count_table.R"


rule import_count_table_to_QIIME2:
    conda:
        "../../envs/QIIME2-2020.02.yml"
    container:
        singularity_envs["qiime2"]
    input:
        "{prefix}/otu_biom.biom",
    output:
        "{prefix}/count-table.qza",
    log:
        logging_folder + "{prefix}/count-table.txt",
    shell:
        """
        qiime tools import \
        --input-path {input[0]} \
        --type 'FeatureTable[Frequency]' \
        --input-format BIOMV100Format \
        --output-path {output[0]}
        """


rule create_visualize_count_table_QIIME2:
    conda:
        "../../envs/QIIME2-2020.02.yml"
    container:
        singularity_envs["qiime2"]
    input:
        "{prefix}/count-table.qza",
    output:
        "{prefix}/count-table.qzv",
    log:
        logging_folder + "{prefix}.txt",
    shell:
        """
        qiime feature-table summarize \
        --i-table {input[0]} \
        --o-visualization {output[0]}
        """


rule force_all_upper_case_rep_seq:
    input:
        rep_seqs="{denoiser}/{prefix}/dna-sequences.fasta",
    output:
        rep_seqs="{denoiser}/{prefix}/dna-sequences_all_UPPER.fasta",
    log:
        logging_folder + "{denoiser}/{prefix}/dna-sequences_all_UPPER.txt",
    shell:
        """
        awk '/^>/ {{print($0)}}; /^[^>]/ {{print(toupper($0))}}' {input[0]} > {output[0]}
        """


rule import_rep_seq_to_QIIME2:
    conda:
        "../../envs/QIIME2-2020.02.yml"
    container:
        singularity_envs["qiime2"]
    input:
        rep_seqs="{denoiser}/{prefix}/dna-sequences_all_UPPER.fasta",
    output:
        "{denoiser}/{prefix}/rep-seqs.qza",
    log:
        logging_folder + "{denoiser}/{prefix}/rep-seqs.txt",
    shell:
        """
        qiime tools import \
        --input-path {input[0]} \
        --output-path {output[0]} \
        --type 'FeatureData[Sequence]'
        """


# Build a new tree based on the filtered sequences
rule create_tree_in_QIIME2:
    conda:
        "../../envs/QIIME2-2020.02.yml"
    container:
        singularity_envs["qiime2"]
    input:
        "{denoiser}/{prefix}/rep-seqs.qza",
    output:
        aligned="{denoiser}/{prefix}/aligned-rep-seqs.qza",
        masked="{denoiser}/{prefix}/masked-aligned-rep-seqs.qza",
        unrooted="{denoiser}/{prefix}/unrooted-tree.qza",
        rooted="{denoiser}/{prefix}/rooted-tree.qza",
    log:
        logging_folder + "{denoiser}/{prefix}/rooted-tree.txt",
    threads: 4
    shell:
        """
        qiime phylogeny align-to-tree-mafft-fasttree \
          --p-n-threads {threads} \
          --i-sequences {input[0]} \
          --o-alignment {output[aligned]} \
          --o-masked-alignment {output[masked]} \
          --o-tree {output[unrooted]} \
          --o-rooted-tree {output[rooted]}
        """


rule export_QIIME2_tree:
    conda:
        "../../envs/QIIME2-2020.02.yml"
    container:
        singularity_envs["qiime2"]
    input:
        rooted="{denoiser}/{prefix}/rooted-tree.qza",
    output:
        rooted="{denoiser}/{prefix}/tree.nwk",
    log:
        logging_folder + "{denoiser}/{prefix}/tree.txt",
    shell:
        """
        qiime tools export --input-path {input} --output-path $(dirname {output[0]})
        """


rule create_visualize_rep_seq_QIIME2:
    conda:
        "../../envs/QIIME2-2020.02.yml"
    container:
        singularity_envs["qiime2"]
    input:
        "{denoiser}/2_denoised/rep-seqs.qza",
    output:
        "{denoiser}/2_denoised/rep-seqs.qzv",
    log:
        logging_folder + "{denoiser}/2_denoised/rep-seqs_qzv.txt",
    shell:
        """
        qiime feature-table tabulate-seqs \
        --i-data {input[0]} \
        --o-visualization {output[0]}
        """


rule import_taxonomy_to_Qiime2:
    conda:
        "../../envs/QIIME2-2020.02.yml"
    container:
        singularity_envs["qiime2"]
    input:
        "{denoiser}/3_classified/{classifier}_{tax_DB}/dna-sequences_tax_assignments.txt",
    output:
        "{denoiser}/3_classified/{classifier}_{tax_DB}/dna-sequences_tax_assignments.qza",
    log:
        logging_folder
        + "{denoiser}/3_classified/{classifier}_{tax_DB}/dna-sequences_tax_assignments.txt",
    shell:
        """
        qiime tools import \
         --type FeatureData[Taxonomy] \
         --input-path {input[0]} \
         --input-format HeaderlessTSVTaxonomyFormat \
         --output-path {output[0]}
        """


rule create_visualize_table_QIIME2:
    conda:
        "../../envs/QIIME2-2020.02.yml"
    container:
        singularity_envs["qiime2"]
    input:
        "{denoiser}/3_classified/{classifier}_{tax_DB}/dna-sequences_tax_assignments.qza",
    output:
        "{denoiser}/3_classified/{classifier}_{tax_DB}/dna-sequences_tax_assignments.qzv",
    log:
        logging_folder
        + "{denoiser}/3_classified/{classifier}_{tax_DB}/dna-sequences_tax_assignments.txt",
    shell:
        """
        qiime metadata tabulate \
            --m-input-file {input} \
            --o-visualization {output}
        """
